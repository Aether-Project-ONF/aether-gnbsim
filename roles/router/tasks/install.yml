---

# TODO: running on master node for now (fix to run on multiple nodes)

- set_fact:
    systemd_network_dir: /etc/systemd/network

- name: set net.ipv4.conf.all.arp_filter to 1
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.arp_filter
    value: '1'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: set net.ipv4.conf.all.arp_ignore to 1
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.arp_ignore
    value: '1'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: set net.ipv4.conf.all.arp_announce to 2
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.arp_announce
    value: '2'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: set net.ipv4.conf.all.rp_filter to 2
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.rp_filter
    value: '2'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: copy 10-gnbsim.netdev to {{ systemd_network_dir }}/10-gnbsim.netdev
  template:
    src: roles/router/templates/10-gnbsim.netdev
    dest: "{{ systemd_network_dir }}/10-gnbsim.netdev"
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: copy 20-gnbsim.network to {{ systemd_network_dir }}/20-gnbsim.network
  template:
    src: roles/router/templates/20-gnbsim.network
    dest: "{{ systemd_network_dir }}/20-gnbsim.network"
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: find {{ gnbsim.network.data_iface }}'s netplan network directory
  shell: basename $(find /*/systemd/network -maxdepth 1 -not -type d -name '*{{ gnbsim.network.data_iface }}.network' -print)
  register: result
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: create {{ systemd_network_dir }}/{{ result.stdout }}.d
  file:
    path: "{{ systemd_network_dir }}/{{ result.stdout }}.d"
    state: directory
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: copy macvlan.conf to {{ systemd_network_dir }}/{{ result.stdout }}.d/macvlan.conf
  template:
    src: roles/router/templates/macvlan.conf
    dest: "{{ systemd_network_dir }}/{{ result.stdout }}.d/macvlan.conf"
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: force systemd to reread configs
  systemd:
    daemon_reload: true
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: restart systemd-networkd
  systemd:
    name: systemd-networkd
    state: restarted
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: "add iptable rule: forward from {{ gnbsim.network.data_iface }} to {{gnbsim.network.mcavlan_iface}} "
  iptables:
    chain: FORWARD
    in_interface: "{{ gnbsim.network.data_iface }}"
    out_interface: "{{ gnbsim.network.mcavlan_iface }}"
    jump: ACCEPT
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: "add iptable rule: forward from {{ gnbsim.network.mcavlan_iface }}  to {{ gnbsim.network.data_iface }}"
  iptables:
    chain: FORWARD
    in_interface: "{{ gnbsim.network.mcavlan_iface }}" 
    out_interface: "{{ gnbsim.network.data_iface }}"
    jump: ACCEPT
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: "create a docker interface with name {{gnbsim.network.macvlan_network_name}} on {{gnbsim.network.mcavlan_iface}} interface"
  command: "docker network create -d macvlan --subnet=172.20.0.0/24 --gateway=172.20.0.1 -o parent={{gnbsim.network.mcavlan_iface}} {{gnbsim.network.macvlan_network_name}}"
  when: inventory_hostname in groups['gnbsim_nodes']

# TODO: use ansible to creat docker network
# name: Create a network with driver options
#   docker_network:
#     name: access-net
#     driver: "macvlan"
#     driver_options:
#       subnet: 172.20.0.0/24
#       gateway: 172.20.0.1 
      

- pause:
    seconds: 15