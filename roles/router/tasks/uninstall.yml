---

# TODO: running on master node for now (fix to run on multiple nodes)

- set_fact:
    systemd_network_dir: /etc/systemd/network


#TODO fix gnbsimNode1 to loop
- name: configure a static route on core host for 172.20.0.0/24 via {{ hostvars["gnbsimNode1"]['ansible_default_ipv4']['address']}}
  shell: |
    ip route del 172.20.0.0/24 via {{  hostvars["gnbsimNode1"]['ansible_default_ipv4']['address'] }}
  when: inventory_hostname in groups['aether_nodes']
  become: true
  ignore_errors: yes

- name: remove a static route on gnbsim host for 192.168.252.0/24 via {{ gnbsim.simulator.amf.ip }}
  shell: |
    ip route del 192.168.252.0/24 via {{ gnbsim.simulator.amf.ip }}
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true
  ignore_errors: yes

- name: Remove all but selected list of containers
  docker_network:
    name: "{{ gnbsim.network.macvlan_network_name }}"
    state: absent

- name: "delete iptable rule: forward from {{ gnbsim.network.data_iface }} to {{gnbsim.network.mcavlan_iface}} "
  iptables:
    chain: FORWARD
    in_interface: "{{ gnbsim.network.data_iface }}"
    out_interface: "{{ gnbsim.network.mcavlan_iface }}"
    jump: ACCEPT
    state: absent
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: "delete iptable rule: forward from {{gnbsim.network.mcavlan_iface}}  to {{ gnbsim.network.data_iface }}"
  iptables:
    chain: FORWARD
    in_interface: "{{ gnbsim.network.mcavlan_iface }}"
    out_interface: "{{ gnbsim.network.data_iface }}"
    jump: ACCEPT
    state: absent
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: find {{ gnbsim.network.data_iface }}'s netplan network directory
  shell: basename $(find /*/systemd/network -maxdepth 1 -not -type d -name '*{{ gnbsim.network.data_iface }}.network' -print)
  register: result
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: delete {{ systemd_network_dir }}/{{ result.stdout }}.d
  file:
    path: "{{ systemd_network_dir }}/{{ result.stdout }}.d"
    state: absent
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: delete {{ systemd_network_dir }}/20-gnbsim.network
  file:
    path: "{{ systemd_network_dir }}/20-aether-gnbsim.network"
    state: absent
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: delete  {{ systemd_network_dir }}/10-gnbsim.netdev
  file:
    path: "{{ systemd_network_dir }}/10-gnbsim.netdev"
    state: absent
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

# TODO: fix this hack (make a proper cleanup service)
- name: post-delete steps
  shell: |
    ip link del {{gnbsim.network.mcavlan_iface}}
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: force systemd to reread configs
  systemd:
    daemon_reload: true
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: set net.ipv4.conf.all.arp_filter to 0
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.arp_filter
    value: '0'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: set net.ipv4.conf.all.arp_ignore to 0
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.arp_ignore
    value: '0'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: set net.ipv4.conf.all.arp_announce to 0
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.arp_announce
    value: '0'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: set net.ipv4.conf.all.rp_filter to 2
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.rp_filter
    value: '2'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

# - name: stop aether-ue-nat.service
#   systemd:
#     name: aether-ue-nat.service
#     state: stopped
#   when: inventory_hostname in groups['gnbsim_nodes']
#   become: true

# - name: disbale aether-ue-nat.service
#   systemd:
#     name: aether-ue-nat.service
#     enabled: false
#   when: inventory_hostname in groups['gnbsim_nodes']
#   become: true

- name: force systemd to reread configs
  systemd:
    daemon_reload: true
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

- name: restart systemd-networkd
  systemd:
    name: systemd-networkd
    state: restarted
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true
