---

# - name: set the policy for the FORWARD chain to DROP
#   ansible.builtin.iptables:
#     chain: FORWARD
#     policy: ACCEPT
#   when: inventory_hostname in groups['gnbsim_nodes']
#   become: true

- set_fact:
    network_name: "{{ gnbsim.network.macvlan_network_name }}"

- name: get info on gnbsim containers
  community.docker.docker_container_info:
    name: "gnbsim-{{ item.key }}"
  with_dict: "{{ gnbsim.simulator.gnbsims }}"
  register: container_info
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true

# - debug:
#     var: "{{network_name}}"

# - debug:
#     msg:
#       var1: "{{ container_info.results[(item.key|int)-1].container.NetworkSettings.Networks['access-net'].IPAddress}}"
#       # var2: "{{container_info.results[(item.key|int)-1].container.NetworkSettings.Networks['(network_name)'].IPAddress}}"
#   with_dict: "{{ gnbsim.simulator.gnbsims }}"
#   when: inventory_hostname in groups['gnbsim_nodes']

- name: copy config files to gnbsim host
  template:
    src: "{{ item.value.config_file }}"
    dest: /tmp/gnbsim-{{ item.key }}.yaml
  vars:
    container_ip: "{{ container_info.results[(item.key|int)-1].container.NetworkSettings.Networks['access-net'].IPAddress}}"
    # container_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    gNBValue: "{{ gnbsim.simulator.gnb.id.base + (item.key) }}"
#    container_port: "{{ gnbsim.simulator.gnb.n3_port.base + (item.key|int) }}"
    amf_ip: "{{ gnbsim.simulator.amf.ip }}"
  with_dict: "{{ gnbsim.simulator.gnbsims }}"
  when: inventory_hostname in groups['gnbsim_nodes']

# - name: copy config files into gnbsim containers
#   docker_container_copy_into:
#     container: "{{ gnbsim.docker.container.prefix }}-{{ item.key }}"
#     path: /tmp/gnbsim-{{ item.key }}.yaml
#     container_path: /tmp/gnbsim.yaml
#   with_dict: "{{ gnbsim.simulator.gnbsims }}"
#   when: inventory_hostname in groups['gnbsim_nodes']

- name: copy config files into gnbsim containers
  shell: |
    docker cp /tmp/gnbsim-{{ item.key }}.yaml \
      {{ gnbsim.docker.container.prefix }}-{{ item.key }}://tmp/gnbsim.yaml
  with_dict: "{{ gnbsim.simulator.gnbsims }}"
  when: inventory_hostname in groups['gnbsim_nodes']
  become: true


# - name: async start gnbsims
#   community.docker.docker_container_exec:
#     container: "{{ gnbsim.docker.container.prefix }}-{{ item.key }}"
#     # command: /bin/bash -c "rm -rf /gnbsim/bin/*.log & /gnbsim/bin/gnbsim --cfg /tmp/gnbsim.yaml"
#     command: /bin/bash -c "rm -rf /gnbsim/bin/*.log; 
#         /gnbsim/bin/gnbsim --cfg /tmp/gnbsim.conf > /tmp/5g-core/e2e/latency/gnbsim{{ gnbsim_pod_idx }}-{{ ansible_date_time.iso8601_basic_short }}.log;
#         cp -f /home/gnbsim.conf ./gnbsim{{ gnbsim_pod_idx }}-{{ ansible_date_time.iso8601_basic_short }}.conf;"
#         # echo '{{ platform | to_nice_yaml }}' > /tmp/5g-core/e2e/latency/gnbsim{{ gnbsim_pod_idx }}-{{ ansible_date_time.iso8601_basic_short }}.params
#   async: 45
#   poll: 0
#   with_dict: "{{ gnbsim.simulator.gnbsims }}"
#   # register: async_results
#   when: inventory_hostname in groups['gnbsim_nodes']

# - name: check gnbsim status
#   shell:
#     cmd: ps aux | grep "\-\-cfg\ /tmp/gnbsim" | wc -l
#   register: sync_result
#   until: sync_result.stdout == '{{ nfs.gnbsim.pod_count + 3 }}'
#   retries: 40
#   delay: 10
#   when: inventory_hostname in groups["kube_control_plane"]

# - name: Force stop experiments
#   shell:
#     cmd: pkill -9 -f /home/gnbsim
#   become: true
#   ignore_errors: yes
#   when: inventory_hostname in groups["kube_control_plane"]

